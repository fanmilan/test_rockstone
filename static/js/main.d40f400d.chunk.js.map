{"version":3,"sources":["components/Screen/Screen.js","components/TimeScreen/TimeScreen.js","components/ChatScreen/ChatScreen.js","App.js","index.js"],"names":["Screen","id","children","className","TimeScreen","handleClick","useState","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","onClick","toLocaleTimeString","ChatScreen","messages","setMessages","valueTextarea","setValueTextarea","placeholder","onChange","e","target","value","newMessage","trim","text","map","item","index","Message","currentText","setCurrentText","inAnimation","setInAnimation","a","textArr","split","Promise","resolve","setTimeout","prevState","animateText","then","App","activeScreen","setActiveScreen","handlers","useSwipeable","onSwiped","eventData","dir","trackMouse","style","transform","changeScreen","newScreen","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAEO,SAASA,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,SACxB,OAAO,qBAAMC,UAAW,iBAAiBF,EAAlC,SACFC,I,MCAF,SAASE,EAAT,GAAoC,IAAfC,EAAc,EAAdA,YACxB,EAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KAcA,OAZAC,qBAAU,WACN,IAAMC,EAAaC,aAAY,WAC3BH,EAAQ,IAAIF,QACb,KACH,OAAO,WACHM,cAAcF,MAEnB,IAKI,cAAC,EAAD,CAAQV,GAAI,OAAZ,SACH,qBAAKE,UAAW,OAAQW,QAAST,EAAjC,SACKG,EAAKO,yB,yCChBX,SAASC,IACZ,MAAgCV,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAA0CZ,mBAAS,IAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KAUA,OAAO,cAAC,EAAD,CAAQnB,GAAI,OAAZ,SACH,sBAAKE,UAAU,OAAf,UACI,sBAAKA,UAAU,aAAf,UACI,0BAAUA,UAAW,uBAAwBkB,YAAa,oGAAqBC,SAAU,SAACC,GAAD,OAAOH,EAAkBG,EAAEC,OAAOC,QAAQA,MAAON,IAC1I,wBAAQhB,UAAW,YAAaW,QAZ5C,WACI,IAAMY,EAAaP,EAAcQ,OAC7BD,IACAR,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAACW,KAAOF,MAClCN,EAAiB,MAQb,uEAEJ,qBAAKjB,UAAU,aAAf,SAEI,qBAAKA,UAAU,WAAf,SAEQc,EAASY,KAAI,SAACC,EAAKC,GAAN,OAAgB,cAACC,EAAD,CAAqBJ,KAAME,EAAKF,MAAlBG,eAUnE,SAASC,EAAT,GAA0B,IAARJ,EAAO,EAAPA,KACd,EAAsCtB,mBAAS,IAA/C,mBAAO2B,EAAP,KAAoBC,EAApB,KACA,EAAsC5B,oBAAS,GAA/C,mBAAO6B,EAAP,KAAoBC,EAApB,KAFqB,4CASrB,WAA2BR,GAA3B,mBAAAS,EAAA,sDACQC,EAAUV,EAAKW,MAAM,IAD7B,IAAAF,EAAA,iBAEaN,GAFb,SAAAM,EAAA,sEAGc,IAAIG,SAAQ,SAACC,GAAD,OAAaC,YAAW,WACtCR,GAAe,SAACS,GAAD,OAAeA,EAAWL,EAAQP,MACjDU,MACD,OANX,iDAAAJ,EAAA,KAEsBC,GAFtB,oDAEaP,EAFb,6BAEaA,GAFb,0EATqB,sBAqBrB,OAlBArB,qBAAU,YAHW,4CAIjBkC,CAAYhB,GAAMiB,MAAK,WACnBT,GAAe,QAEpB,IAcI,sBAAKjC,UAAW,UAAhB,UAA2B,sBAAOA,UAAW,gBAAlB,SAAoC8B,IAE9DE,GAAe,sBAAMhC,UAAW,kBAAjB,kB,YCrDZ,SAAS2C,IACpB,MAAwCxC,mBAAS,GAAjD,mBAAOyC,EAAP,KAAqBC,EAArB,KAEMC,EAAWC,uBAAa,CAC1BC,SAAU,SAACC,GACP,OAAQA,EAAUC,KACd,IAAK,OACDL,EAAgB,GAChB,MACJ,IAAK,QACDA,EAAgB,KAM5BM,YAAY,IAGVC,EAAQ,CACVC,UAAU,aAAD,QAAgB,IAAMT,EAAtB,OAGb,SAASU,EAAaC,GAClBV,EAAgBU,GAIpB,OACI,qBAAKvD,UAAU,MAAf,SACI,gDAAS8C,GAAT,IAAmB9C,UAAU,UAAUoD,MAAOA,EAA9C,UACI,cAAC,EAAD,CAAYlD,YAAaoD,EAAaE,KAAK,KAAM,KACjD,cAAC,EAAD,CAAYtD,YAAaoD,EAAaE,KAAK,KAAM,WCjCjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d40f400d.chunk.js","sourcesContent":["import './Screen.scss';\r\n\r\nexport function Screen({id, children}) {\r\n    return <div  className={'screen screen_'+id}>\r\n        {children}\r\n    </div>;\r\n}","import {Screen} from \"../Screen/Screen\";\r\nimport {useState, useEffect} from \"react\";\r\nimport './TimeScreen.scss';\r\n\r\nexport function TimeScreen({handleClick}) {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return <Screen id={'time'}>\r\n        <div className={'time'} onClick={handleClick}>\r\n            {date.toLocaleTimeString()}\r\n        </div>\r\n    </Screen>\r\n}","import {Screen} from \"../Screen/Screen\";\r\nimport './ChatScreen.scss';\r\nimport {useState, useEffect} from \"react\";\r\n\r\n\r\nexport function ChatScreen() {\r\n    const [messages, setMessages] = useState([]);\r\n    const [valueTextarea, setValueTextarea] = useState('');\r\n\r\n    function sendMessage() {\r\n        const newMessage = valueTextarea.trim();\r\n        if (newMessage) {\r\n            setMessages([...messages, {text : newMessage}]);\r\n            setValueTextarea('');\r\n        }\r\n    }\r\n\r\n    return <Screen id={'chat'}>\r\n        <div className=\"chat\">\r\n            <div className=\"chat__form\">\r\n                <textarea className={'chat__textarea input'} placeholder={'Введите сообщение'} onChange={(e) => setValueTextarea( e.target.value)} value={valueTextarea}/>\r\n                <button className={'chat__btn'} onClick={sendMessage}>Отправить</button>\r\n            </div>\r\n            <div className=\"chat__body\">\r\n\r\n                <div className=\"messages\">\r\n                    {\r\n                        messages.map((item,index) => <Message key={index} text={item.text}/>)\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </Screen>\r\n}\r\n\r\nfunction Message({text}) {\r\n    const [currentText, setCurrentText] = useState('');\r\n    const [inAnimation, setInAnimation] = useState(true);\r\n    useEffect(() => {\r\n        animateText(text).then(() => {\r\n            setInAnimation(false);\r\n        });\r\n    }, []);\r\n\r\n    async function animateText(text) {\r\n        let textArr = text.split('');\r\n        for (let index in textArr) {\r\n            await new Promise((resolve) => setTimeout(() => {\r\n                setCurrentText((prevState) => prevState +textArr[index]);\r\n                resolve();\r\n            }, 50));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return <div className={'message'}><span  className={'message__text'}>{currentText}</span>\r\n        {\r\n            inAnimation && <span className={'message__typing'}>.</span>\r\n        }\r\n    </div>;\r\n}\r\n","import './App.css';\nimport {TimeScreen} from \"./components/TimeScreen/TimeScreen\";\nimport {useState} from \"react\";\nimport {ChatScreen} from \"./components/ChatScreen/ChatScreen\";\nimport {useSwipeable} from \"react-swipeable\";\n\n\nexport default function App() {\n    const [activeScreen, setActiveScreen] = useState(0);\n\n    const handlers = useSwipeable({\n        onSwiped: (eventData) => {\n            switch (eventData.dir) {\n                case 'Left':\n                    setActiveScreen(1);\n                    break;\n                case 'Right':\n                    setActiveScreen(0);\n                    break;\n                default:\n                    break;\n            }\n        },\n        trackMouse: true,\n    });\n\n    const style = {\n        transform: `translate(${-100 * activeScreen}%)`\n    }\n\n    function changeScreen(newScreen) {\n        setActiveScreen(newScreen);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div {...handlers} className=\"screens\" style={style}>\n                <ChatScreen handleClick={changeScreen.bind(null, 1)}/>\n                <TimeScreen handleClick={changeScreen.bind(null, 0)}/>\n            </div>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}